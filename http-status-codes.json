{
    "1xx": {
        "class": "Informational",
        "synopsis": "Request received, continuing process",
        "description": "This class of status code indicates a provisional response, consisting only of the Status-Line and optional headers, and is terminated by an empty line. There are no required headers for this class of status code. Since HTTP/1.0 did not define any 1xx status codes, servers MUST NOT send a 1xx response to an HTTP/1.0 client except under experimental conditions.\nA client MUST be prepared to accept one or more 1xx status responses prior to a regular response, even if the client does not expect a 100 (Continue) status message. Unexpected 1xx status responses MAY be ignored by a user agent.\nProxies MUST forward 1xx responses, unless the connection between the proxy and its client has been closed, or unless the proxy itself requested the generation of the 1xx response. (For example, if a proxy adds a \"Expect: 100-continue\" field when it forwards a request, then it need not forward the corresponding 100 (Continue) response(s).)\n",
        "status-codes": {
            "100": {
                "reason-phrase": "Continue",
                "description": "The client SHOULD continue with its request. This interim response is used to inform the client that the initial part of the request has been received and has not yet been rejected by the server. The client SHOULD continue by sending the remainder of the request or, if the request has already been completed, ignore this response. The server MUST send a final response after the request has been completed. See section 8.2.3 for detailed discussion of the use and handling of this status code.\n"
            },
            "101": {
                "reason-phrase": "Switching Protocols",
                "description": "The server understands and is willing to comply with the client's request, via the Upgrade message header field (section 14.42), for a change in the application protocol being used on this connection. The server will switch protocols to those defined by the response's Upgrade header field immediately after the empty line which terminates the 101 response.\nThe protocol SHOULD be switched only when it is advantageous to do so. For example, switching to a newer version of HTTP is advantageous over older versions, and switching to a real-time, synchronous protocol might be advantageous when delivering resources that use such features.\n"
            }
        }
    },
    "2xx": {
        "class": "Success",
        "synopsis": "The action was successfully received, understood, and accepted",
        "description": "This class of status code indicates that the client's request was successfully received, understood, and accepted.\n",
        "status-codes": {
            "200": {
                "reason-phrase": "OK",
                "description": "The request has succeeded. The information returned with the response is dependent on the method used in the request, for example:\nGET    an entity corresponding to the requested resource is sent in\n       the response;\n\nHEAD   the entity-header fields corresponding to the requested\n       resource are sent in the response without any message-body;\n\nPOST   an entity describing or containing the result of the action;\nTRACE  an entity containing the request message as received by the\n       end server.\n"
            },
            "201": {
                "reason-phrase": "Created",
                "description": "The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead.\nA 201 response MAY contain an ETag response header field indicating the current value of the entity tag for the requested variant just created, see section 14.19.\n"
            },
            "202": {
                "reason-phrase": "Accepted",
                "description": "The request has been accepted for processing, but the processing has not been completed.  The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place. There is no facility for re-sending a status code from an asynchronous operation such as this.\nThe 202 response is intentionally non-committal. Its purpose is to allow a server to accept a request for some other process (perhaps a batch-oriented process that is only run once per day) without requiring that the user agent's connection to the server persist until the process is completed. The entity returned with this response SHOULD include an indication of the request's current status and either a pointer to a status monitor or some estimate of when the user can expect the request to be fulfilled.\n"
            },
            "203": {
                "reason-phrase": "Non-Authoritative Information",
                "description": "The returned metainformation in the entity-header is not the definitive set as available from the origin server, but is gathered from a local or a third-party copy. The set presented MAY be a subset or superset of the original version. For example, including local annotation information about the resource might result in a superset of the metainformation known by the origin server. Use of this response code is not required and is only appropriate when the response would otherwise be 200 (OK).\n"
            },
            "204": {
                "reason-phrase": "No Content",
                "description": "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant.\nIf the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view.\nThe 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields.\n"
            },
            "205": {
                "reason-phrase": "Reset Content",
                "description": "The server has fulfilled the request and the user agent SHOULD reset the document view which caused the request to be sent. This response is primarily intended to allow input for actions to take place via user input, followed by a clearing of the form in which the input is given so that the user can easily initiate another input action. The response MUST NOT include an entity.\n"
            },
            "206": {
                "reason-phrase": "Partial Content",
                "description": "The server has fulfilled the partial GET request for the resource. The request MUST have included a Range header field (section 14.35) indicating the desired range, and MAY have included an If-Range header field (section 14.27) to make the request conditional.\nThe response MUST include the following header fields:\n\n   - Either a Content-Range header field (section 14.16) indicating\n     the range included with this response, or a multipart/byteranges\n     Content-Type including Content-Range fields for each part. If a\n     Content-Length header field is present in the response, its\n     value MUST match the actual number of OCTETs transmitted in the\n     message-body.\n\n   - Date\n\n   - ETag and/or Content-Location, if the header would have been sent\n     in a 200 response to the same request\n\n   - Expires, Cache-Control, and/or Vary, if the field-value might\n     differ from that sent in any previous response for the same\n     variant\n\nIf the 206 response is the result of an If-Range request that used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. If the response is the result of an If-Range request that used a weak validator, the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers. Otherwise, the response MUST include all of the entity-headers that would have been returned with a 200 (OK) response to the same request.\nA cache MUST NOT combine a 206 response with other previously cached content if the ETag or Last-Modified headers do not match exactly, see 13.5.4.\nA cache that does not support the Range and Content-Range headers MUST NOT cache 206 (Partial) responses.\n"
            }
        }
    },
    "3xx": {
        "class": "Redirection",
        "synopsis": "Further action must be taken in order to complete the request",
        "description": "This class of status code indicates that further action needs to be taken by the user agent in order to fulfill the request.  The action required MAY be carried out by the user agent without interaction with the user if and only if the method used in the second request is GET or HEAD. A client SHOULD detect infinite redirection loops, since such loops generate network traffic for each redirection.\n\n   Note: previous versions of this specification recommended a\n   maximum of five redirections. Content developers should be aware\n   that there might be clients that implement such a fixed\n   limitation.\n",
        "status-codes": {
            "300": {
                "reason-phrase": "Multiple Choices",
                "description": "The requested resource corresponds to any one of a set of representations, each with its own specific location, and agent- driven negotiation information (section 12) is being provided so that the user (or user agent) can select a preferred representation and redirect its request to that location.\nUnless it was a HEAD request, the response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content- Type header field. Depending upon the format and the capabilities of the user agent, selection of the most appropriate choice MAY be performed automatically. However, this specification does not define any standard for such automatic selection.\nIf the server has a preferred choice of representation, it SHOULD include the specific URI for that representation in the Location field; user agents MAY use the Location field value for automatic redirection. This response is cacheable unless indicated otherwise.\n"
            },
            "301": {
                "reason-phrase": "Moved Permanently",
                "description": "The requested resource has been assigned a new permanent URI and any future references to this resource SHOULD use one of the returned URIs.  Clients with link editing capabilities ought to automatically re-link references to the Request-URI to one or more of the new references returned by the server, where possible. This response is cacheable unless indicated otherwise.\nThe new permanent URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).\nIf the 301 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.\n\n   Note: When automatically redirecting a POST request after\n   receiving a 301 status code, some existing HTTP/1.0 user agents\n   will erroneously change it into a GET request.\n"
            },
            "302": {
                "reason-phrase": "Found",
                "description": "The requested resource resides temporarily under a different URI. Since the redirection might be altered on occasion, the client SHOULD continue to use the Request-URI for future requests.  This response is only cacheable if indicated by a Cache-Control or Expires header field.\nThe temporary URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).\nIf the 302 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.\n\n   Note: RFC 1945 and RFC 2068 specify that the client is not allowed\n   to change the method on the redirected request.  However, most\n   existing user agent implementations treat 302 as if it were a 303\n   response, performing a GET on the Location field-value regardless\n   of the original request method. The status codes 303 and 307 have\n   been added for servers that wish to make unambiguously clear which\n   kind of reaction is expected of the client.\n"
            },
            "303": {
                "reason-phrase": "See Other",
                "description": "The response to the request can be found under a different URI and SHOULD be retrieved using a GET method on that resource. This method exists primarily to allow the output of a POST-activated script to redirect the user agent to a selected resource. The new URI is not a substitute reference for the originally requested resource. The 303 response MUST NOT be cached, but the response to the second (redirected) request might be cacheable.\nThe different URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).\n\n   Note: Many pre-HTTP/1.1 user agents do not understand the 303\n   status. When interoperability with such clients is a concern, the\n   302 status code may be used instead, since most user agents react\n   to a 302 response as described here for 303.\n"
            },
            "304": {
                "reason-phrase": "Not Modified",
                "description": "If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields.\nThe response MUST include the following header fields:\n\n   - Date, unless its omission is required by section 14.18.1\n\nIf a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly.\n\n   - ETag and/or Content-Location, if the header would have been sent\n     in a 200 response to the same request\n\n   - Expires, Cache-Control, and/or Vary, if the field-value might\n     differ from that sent in any previous response for the same\n     variant\n\nIf the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers.\nIf a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional.\nIf a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response.\n"
            },
            "305": {
                "reason-phrase": "Use Proxy",
                "description": "The requested resource MUST be accessed through the proxy given by the Location field. The Location field gives the URI of the proxy. The recipient is expected to repeat this single request via the proxy. 305 responses MUST only be generated by origin servers.\n\n   Note: RFC 2068 was not clear that 305 was intended to redirect a\n   single request, and to be generated by origin servers only.  Not\n   observing these limitations has significant security consequences.\n"
            },
            "306": {
                "reason-phrase": "(Unused)",
                "description": "The 306 status code was used in a previous version of the specification, is no longer used, and the code is reserved.\n"
            },
            "307": {
                "reason-phrase": "Temporary Redirect",
                "description": "The requested resource resides temporarily under a different URI. Since the redirection MAY be altered on occasion, the client SHOULD continue to use the Request-URI for future requests.  This response is only cacheable if indicated by a Cache-Control or Expires header field.\nThe temporary URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s) , since many pre-HTTP/1.1 user agents do not understand the 307 status. Therefore, the note SHOULD contain the information necessary for a user to repeat the original request on the new URI.\nIf the 307 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.\n"
            }
        }
    },
    "4xx": {
        "class": "Client Error",
        "synopsis": "The request contains bad syntax or cannot be fulfilled",
        "description": "The 4xx class of status code is intended for cases in which the client seems to have erred. Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. These status codes are applicable to any request method. User agents SHOULD display any included entity to the user.\nIf the client is sending data, a server implementation using TCP SHOULD be careful to ensure that the client acknowledges receipt of the packet(s) containing the response, before the server closes the input connection. If the client continues sending data to the server after the close, the server's TCP stack will send a reset packet to the client, which may erase the client's unacknowledged input buffers before they can be read and interpreted by the HTTP application.\n"
    },
    "5xx": {
        "class": "Server Error",
        "synopsis": "The server failed to fulfill an apparently valid request",
        "description": "Response status codes beginning with the digit \"5\" indicate cases in which the server is aware that it has erred or is incapable of performing the request. Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. User agents SHOULD display any included entity to the user. These response codes are applicable to any request method.\n"
    }
}
